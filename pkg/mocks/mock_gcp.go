// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/clients/gcp/gcp.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gcp "github.com/openshift/osd-network-verifier/pkg/clients/gcp"
	gomock "go.uber.org/mock/gomock"
	v1 "google.golang.org/api/compute/v1"
)

// MockGcpClient is a mock of GcpClient interface.
type MockGcpClient struct {
	ctrl     *gomock.Controller
	recorder *MockGcpClientMockRecorder
}

// MockGcpClientMockRecorder is the mock recorder for MockGcpClient.
type MockGcpClientMockRecorder struct {
	mock *MockGcpClient
}

// NewMockGcpClient creates a new mock instance.
func NewMockGcpClient(ctrl *gomock.Controller) *MockGcpClient {
	mock := &MockGcpClient{ctrl: ctrl}
	mock.recorder = &MockGcpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGcpClient) EXPECT() *MockGcpClientMockRecorder {
	return m.recorder
}

// CreateInstance mocks base method.
func (m *MockGcpClient) CreateInstance(projectID, zone string, instance *v1.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", projectID, zone, instance)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInstance indicates an expected call of CreateInstance.
func (mr *MockGcpClientMockRecorder) CreateInstance(projectID, zone, instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockGcpClient)(nil).CreateInstance), projectID, zone, instance)
}

// GetInstance mocks base method.
func (m *MockGcpClient) GetInstance(projectID, zone, instanceName string) (v1.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", projectID, zone, instanceName)
	ret0, _ := ret[0].(v1.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockGcpClientMockRecorder) GetInstance(projectID, zone, instanceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockGcpClient)(nil).GetInstance), projectID, zone, instanceName)
}

// GetInstancePorts mocks base method.
func (m *MockGcpClient) GetInstancePorts(projectID, zone, instanceName string) (*v1.SerialPortOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancePorts", projectID, zone, instanceName)
	ret0, _ := ret[0].(*v1.SerialPortOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancePorts indicates an expected call of GetInstancePorts.
func (mr *MockGcpClientMockRecorder) GetInstancePorts(projectID, zone, instanceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancePorts", reflect.TypeOf((*MockGcpClient)(nil).GetInstancePorts), projectID, zone, instanceName)
}

// ListMachineTypes mocks base method.
func (m *MockGcpClient) ListMachineTypes(projectID, zone string) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMachineTypes", projectID, zone)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMachineTypes indicates an expected call of ListMachineTypes.
func (mr *MockGcpClientMockRecorder) ListMachineTypes(projectID, zone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMachineTypes", reflect.TypeOf((*MockGcpClient)(nil).ListMachineTypes), projectID, zone)
}

// SetClient mocks base method.
func (m *MockGcpClient) SetClient(e gcp.GcpClient) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClient", e)
}

// SetClient indicates an expected call of SetClient.
func (mr *MockGcpClientMockRecorder) SetClient(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClient", reflect.TypeOf((*MockGcpClient)(nil).SetClient), e)
}

// SetInstanceLabels mocks base method.
func (m *MockGcpClient) SetInstanceLabels(projectID, zone, instanceName string, labelReq *v1.InstancesSetLabelsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInstanceLabels", projectID, zone, instanceName, labelReq)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInstanceLabels indicates an expected call of SetInstanceLabels.
func (mr *MockGcpClientMockRecorder) SetInstanceLabels(projectID, zone, instanceName, labelReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInstanceLabels", reflect.TypeOf((*MockGcpClient)(nil).SetInstanceLabels), projectID, zone, instanceName, labelReq)
}

// TerminateComputeServiceInstance mocks base method.
func (m *MockGcpClient) TerminateComputeServiceInstance(projectID, zone, instanceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateComputeServiceInstance", projectID, zone, instanceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// TerminateComputeServiceInstance indicates an expected call of TerminateComputeServiceInstance.
func (mr *MockGcpClientMockRecorder) TerminateComputeServiceInstance(projectID, zone, instanceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateComputeServiceInstance", reflect.TypeOf((*MockGcpClient)(nil).TerminateComputeServiceInstance), projectID, zone, instanceName)
}
